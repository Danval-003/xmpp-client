import base64
from PIL import Image
from io import BytesIO
import matplotlib.pyplot as plt
import numpy as np

# Cadena Base64 (recorta para tu ejemplo; asegúrate de usar la cadena completa)
base64_image = "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"

try:
    # Decodificar la cadena Base64
    image_data = base64.b64decode(base64_image)

    # Cargar los datos en un objeto de imagen usando PIL
    image = Image.open(BytesIO(image_data))
    image.verify()  # Verifica la integridad de la imagen

    # Convertir la imagen a un formato que matplotlib pueda manejar (numpy array)
    image = Image.open(BytesIO(image_data))  # Reabrir la imagen después de verificar
    image_array = np.array(image)

    # Mostrar la imagen usando matplotlib
    plt.imshow(image_array)
    plt.axis('off')  # Opcional: desactiva los ejes
    plt.show()
except Exception as e:
    print(f"Error al procesar la imagen: {e}")